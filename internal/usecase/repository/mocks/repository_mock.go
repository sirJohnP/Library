// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/project/library/internal/entity"
	repository "github.com/project/library/internal/usecase/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorRepository is a mock of AuthorRepository interface.
type MockAuthorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthorRepositoryMockRecorder is the mock recorder for MockAuthorRepository.
type MockAuthorRepositoryMockRecorder struct {
	mock *MockAuthorRepository
}

// NewMockAuthorRepository creates a new mock instance.
func NewMockAuthorRepository(ctrl *gomock.Controller) *MockAuthorRepository {
	mock := &MockAuthorRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorRepository) EXPECT() *MockAuthorRepositoryMockRecorder {
	return m.recorder
}

// ChangeAuthorInfo mocks base method.
func (m *MockAuthorRepository) ChangeAuthorInfo(ctx context.Context, id string, newAuthor entity.Author) (entity.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAuthorInfo", ctx, id, newAuthor)
	ret0, _ := ret[0].(entity.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeAuthorInfo indicates an expected call of ChangeAuthorInfo.
func (mr *MockAuthorRepositoryMockRecorder) ChangeAuthorInfo(ctx, id, newAuthor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAuthorInfo", reflect.TypeOf((*MockAuthorRepository)(nil).ChangeAuthorInfo), ctx, id, newAuthor)
}

// CreateAuthor mocks base method.
func (m *MockAuthorRepository) CreateAuthor(ctx context.Context, author entity.Author) (entity.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", ctx, author)
	ret0, _ := ret[0].(entity.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockAuthorRepositoryMockRecorder) CreateAuthor(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockAuthorRepository)(nil).CreateAuthor), ctx, author)
}

// GetAuthor mocks base method.
func (m *MockAuthorRepository) GetAuthor(ctx context.Context, id string) (entity.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor", ctx, id)
	ret0, _ := ret[0].(entity.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockAuthorRepositoryMockRecorder) GetAuthor(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockAuthorRepository)(nil).GetAuthor), ctx, id)
}

// MockBookRepository is a mock of BookRepository interface.
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
	isgomock struct{}
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository.
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance.
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// ChangeBookInfo mocks base method.
func (m *MockBookRepository) ChangeBookInfo(ctx context.Context, id string, newBook entity.Book) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBookInfo", ctx, id, newBook)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBookInfo indicates an expected call of ChangeBookInfo.
func (mr *MockBookRepositoryMockRecorder) ChangeBookInfo(ctx, id, newBook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBookInfo", reflect.TypeOf((*MockBookRepository)(nil).ChangeBookInfo), ctx, id, newBook)
}

// CreateBook mocks base method.
func (m *MockBookRepository) CreateBook(ctx context.Context, book entity.Book) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, book)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookRepositoryMockRecorder) CreateBook(ctx, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookRepository)(nil).CreateBook), ctx, book)
}

// GetBook mocks base method.
func (m *MockBookRepository) GetBook(ctx context.Context, id string) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, id)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookRepositoryMockRecorder) GetBook(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookRepository)(nil).GetBook), ctx, id)
}

// GetBooksByAuthor mocks base method.
func (m *MockBookRepository) GetBooksByAuthor(ctx context.Context, authorID string) ([]entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksByAuthor", ctx, authorID)
	ret0, _ := ret[0].([]entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksByAuthor indicates an expected call of GetBooksByAuthor.
func (mr *MockBookRepositoryMockRecorder) GetBooksByAuthor(ctx, authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksByAuthor", reflect.TypeOf((*MockBookRepository)(nil).GetBooksByAuthor), ctx, authorID)
}

// MockOutboxRepository is a mock of OutboxRepository interface.
type MockOutboxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxRepositoryMockRecorder
	isgomock struct{}
}

// MockOutboxRepositoryMockRecorder is the mock recorder for MockOutboxRepository.
type MockOutboxRepositoryMockRecorder struct {
	mock *MockOutboxRepository
}

// NewMockOutboxRepository creates a new mock instance.
func NewMockOutboxRepository(ctrl *gomock.Controller) *MockOutboxRepository {
	mock := &MockOutboxRepository{ctrl: ctrl}
	mock.recorder = &MockOutboxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxRepository) EXPECT() *MockOutboxRepositoryMockRecorder {
	return m.recorder
}

// GetMessages mocks base method.
func (m *MockOutboxRepository) GetMessages(ctx context.Context, batchSize int, inProgressTTL time.Duration) ([]repository.OutboxData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, batchSize, inProgressTTL)
	ret0, _ := ret[0].([]repository.OutboxData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockOutboxRepositoryMockRecorder) GetMessages(ctx, batchSize, inProgressTTL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockOutboxRepository)(nil).GetMessages), ctx, batchSize, inProgressTTL)
}

// MarkAsProcessed mocks base method.
func (m *MockOutboxRepository) MarkAsProcessed(ctx context.Context, idempotencyKeys []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsProcessed", ctx, idempotencyKeys)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsProcessed indicates an expected call of MarkAsProcessed.
func (mr *MockOutboxRepositoryMockRecorder) MarkAsProcessed(ctx, idempotencyKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsProcessed", reflect.TypeOf((*MockOutboxRepository)(nil).MarkAsProcessed), ctx, idempotencyKeys)
}

// SendMessage mocks base method.
func (m *MockOutboxRepository) SendMessage(ctx context.Context, idempotencyKey string, kind repository.OutboxKind, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, idempotencyKey, kind, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockOutboxRepositoryMockRecorder) SendMessage(ctx, idempotencyKey, kind, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockOutboxRepository)(nil).SendMessage), ctx, idempotencyKey, kind, message)
}
