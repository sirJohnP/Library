// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	library "github.com/project/library/generated/api/library"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorUseCase is a mock of AuthorUseCase interface.
type MockAuthorUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorUseCaseMockRecorder
	isgomock struct{}
}

// MockAuthorUseCaseMockRecorder is the mock recorder for MockAuthorUseCase.
type MockAuthorUseCaseMockRecorder struct {
	mock *MockAuthorUseCase
}

// NewMockAuthorUseCase creates a new mock instance.
func NewMockAuthorUseCase(ctrl *gomock.Controller) *MockAuthorUseCase {
	mock := &MockAuthorUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthorUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorUseCase) EXPECT() *MockAuthorUseCaseMockRecorder {
	return m.recorder
}

// ChangeAuthorInfo mocks base method.
func (m *MockAuthorUseCase) ChangeAuthorInfo(ctx context.Context, authorID, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAuthorInfo", ctx, authorID, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeAuthorInfo indicates an expected call of ChangeAuthorInfo.
func (mr *MockAuthorUseCaseMockRecorder) ChangeAuthorInfo(ctx, authorID, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAuthorInfo", reflect.TypeOf((*MockAuthorUseCase)(nil).ChangeAuthorInfo), ctx, authorID, newName)
}

// GetAuthor mocks base method.
func (m *MockAuthorUseCase) GetAuthor(ctx context.Context, authorID string) (*library.GetAuthorInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor", ctx, authorID)
	ret0, _ := ret[0].(*library.GetAuthorInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockAuthorUseCaseMockRecorder) GetAuthor(ctx, authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockAuthorUseCase)(nil).GetAuthor), ctx, authorID)
}

// RegisterAuthor mocks base method.
func (m *MockAuthorUseCase) RegisterAuthor(ctx context.Context, authorName string) (*library.RegisterAuthorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAuthor", ctx, authorName)
	ret0, _ := ret[0].(*library.RegisterAuthorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAuthor indicates an expected call of RegisterAuthor.
func (mr *MockAuthorUseCaseMockRecorder) RegisterAuthor(ctx, authorName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAuthor", reflect.TypeOf((*MockAuthorUseCase)(nil).RegisterAuthor), ctx, authorName)
}

// MockBookUseCase is a mock of BookUseCase interface.
type MockBookUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBookUseCaseMockRecorder
	isgomock struct{}
}

// MockBookUseCaseMockRecorder is the mock recorder for MockBookUseCase.
type MockBookUseCaseMockRecorder struct {
	mock *MockBookUseCase
}

// NewMockBookUseCase creates a new mock instance.
func NewMockBookUseCase(ctrl *gomock.Controller) *MockBookUseCase {
	mock := &MockBookUseCase{ctrl: ctrl}
	mock.recorder = &MockBookUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookUseCase) EXPECT() *MockBookUseCaseMockRecorder {
	return m.recorder
}

// ChangeBookInfo mocks base method.
func (m *MockBookUseCase) ChangeBookInfo(ctx context.Context, bookID, name string, authorIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBookInfo", ctx, bookID, name, authorIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeBookInfo indicates an expected call of ChangeBookInfo.
func (mr *MockBookUseCaseMockRecorder) ChangeBookInfo(ctx, bookID, name, authorIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBookInfo", reflect.TypeOf((*MockBookUseCase)(nil).ChangeBookInfo), ctx, bookID, name, authorIDs)
}

// GetBook mocks base method.
func (m *MockBookUseCase) GetBook(ctx context.Context, bookID string) (*library.GetBookInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, bookID)
	ret0, _ := ret[0].(*library.GetBookInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookUseCaseMockRecorder) GetBook(ctx, bookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookUseCase)(nil).GetBook), ctx, bookID)
}

// GetBooksByAuthor mocks base method.
func (m *MockBookUseCase) GetBooksByAuthor(ctx context.Context, authorID string) ([]*library.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksByAuthor", ctx, authorID)
	ret0, _ := ret[0].([]*library.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksByAuthor indicates an expected call of GetBooksByAuthor.
func (mr *MockBookUseCaseMockRecorder) GetBooksByAuthor(ctx, authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksByAuthor", reflect.TypeOf((*MockBookUseCase)(nil).GetBooksByAuthor), ctx, authorID)
}

// RegisterBook mocks base method.
func (m *MockBookUseCase) RegisterBook(ctx context.Context, name string, authorIDs []string) (*library.AddBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBook", ctx, name, authorIDs)
	ret0, _ := ret[0].(*library.AddBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterBook indicates an expected call of RegisterBook.
func (mr *MockBookUseCaseMockRecorder) RegisterBook(ctx, name, authorIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBook", reflect.TypeOf((*MockBookUseCase)(nil).RegisterBook), ctx, name, authorIDs)
}
