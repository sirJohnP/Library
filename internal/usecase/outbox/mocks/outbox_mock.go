// Code generated by MockGen. DO NOT EDIT.
// Source: outbox.go
//
// Generated by this command:
//
//	mockgen -source=outbox.go -destination=mocks/outbox_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockOutbox is a mock of Outbox interface.
type MockOutbox struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxMockRecorder
	isgomock struct{}
}

// MockOutboxMockRecorder is the mock recorder for MockOutbox.
type MockOutboxMockRecorder struct {
	mock *MockOutbox
}

// NewMockOutbox creates a new mock instance.
func NewMockOutbox(ctrl *gomock.Controller) *MockOutbox {
	mock := &MockOutbox{ctrl: ctrl}
	mock.recorder = &MockOutboxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutbox) EXPECT() *MockOutboxMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockOutbox) Start(ctx context.Context, workers, batchSize int, waitTimeMs, inProgressTTLSeconds time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, workers, batchSize, waitTimeMs, inProgressTTLSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockOutboxMockRecorder) Start(ctx, workers, batchSize, waitTimeMs, inProgressTTLSeconds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOutbox)(nil).Start), ctx, workers, batchSize, waitTimeMs, inProgressTTLSeconds)
}
