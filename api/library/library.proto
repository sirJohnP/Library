syntax="proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

package library;

option go_package = "github.com/project/library/pkg/api/library;library";

service Library {
  // post: "/v1/library/book"
  rpc AddBook(AddBookRequest) returns (AddBookResponse) {
    option (google.api.http) = {
      post: "/v1/library/book"
      body: "*"
    };
  }

  // put: "/v1/library/book"
  rpc UpdateBook(UpdateBookRequest) returns (UpdateBookResponse) {
    option (google.api.http) = {
      put: "/v1/library/book"
      body: "*"
    };
  }

  // get: "/v1/library/book/{id}"
  rpc GetBookInfo(GetBookInfoRequest) returns (GetBookInfoResponse) {
    option (google.api.http) = {
      get: "/v1/library/book_info/{id=*}"
    };
  }

  // post: "/v1/library/author"
  rpc RegisterAuthor(RegisterAuthorRequest) returns (RegisterAuthorResponse) {
    option (google.api.http) = {
      post: "/v1/library/author"
      body: "*"
    };
  }

  // put: "/v1/library/author"
  rpc ChangeAuthorInfo(ChangeAuthorInfoRequest) returns (ChangeAuthorInfoResponse) {
    option (google.api.http) = {
      put: "/v1/library/author"
      body: "*"
    };
  }

  // get: "/v1/library/author/{id}"
  rpc GetAuthorInfo(GetAuthorInfoRequest) returns (GetAuthorInfoResponse) {
    option (google.api.http) = {
      get: "/v1/library/author/{id=*}"
    };
  }

  // get: "/v1/library/author_books/{author_id}"
  rpc GetAuthorBooks(GetAuthorBooksRequest) returns (stream Book) {
    option (google.api.http) = {
      get: "/v1/library/author_books/{author_id}"
    };
  }
}

message Book {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  repeated string author_id = 3 [(validate.rules).repeated = {
    unique: true,
    items: {
      string: {
        uuid: true
      }}
  }];
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message AddBookRequest {
  string name = 1;
  repeated string author_ids = 2 [(validate.rules).repeated = {
    unique: true,
    items: {
      string: {
        uuid: true
      }}
  }];
}

message AddBookResponse {
  Book book = 1;
}

message UpdateBookRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2;
  repeated string author_ids = 3 [(validate.rules).repeated = {
    unique: true,
    items: {
      string: {
        uuid: true
      }}
  }];
}

message UpdateBookResponse {}

message GetBookInfoRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetBookInfoResponse {
  Book book = 1;
}

message RegisterAuthorRequest {
  string name = 1 [(validate.rules).string = {
    pattern: "^[A-Za-z0-9]+( [A-Za-z0-9]+)*$",
    min_len: 1,
    max_len: 512
  }];
}

message RegisterAuthorResponse {
  string id = 1;
}

message ChangeAuthorInfoRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2 [(validate.rules).string = {
    pattern: "^[A-Za-z0-9]+( [A-Za-z0-9]+)*$",
    min_len: 1,
    max_len: 512
  }];
}

message ChangeAuthorInfoResponse {}

message GetAuthorInfoRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message GetAuthorInfoResponse {
  string id = 1;
  string name = 2;
}

message GetAuthorBooksRequest {
  string author_id = 1 [(validate.rules).string.uuid = true];
}